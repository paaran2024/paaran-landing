user  nginx;
worker_processes  auto;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    server {
        listen 80;
        # server_name paaran.com; 
        # 1차 NginX와 Ingress를 통해 분기처리 완료 됐으므로 필요 x
        # 즉, 내부 용도의 nginx이므로 라우팅 처리 필요 없음

        # Nginx에서 정적 파일 서빙
        location /static/ {
            root /usr/share/nginx/html;
            try_files $uri $uri/ =404;
        }

        # SPA 리디렉션 설정
        location / {
            root /usr/share/nginx/html;
            try_files $uri /index.html;
        }

    }

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;
}



# Nginx가 정적 파일 서빙만 담당하는 역할입니다. 
# Ingress가 API 트래픽 및 기타 경로를 처리하므로, 
# Nginx는 React 애플리케이션의 빌드 결과물(정적 파일)을 서빙하는 데만 사용됩니다.
# 이렇게 하면 Nginx는 외부에서 들어오는 요청을 받아 React의 정적 파일을 제공하는 역할을 하고, 
# API 요청은 Ingress를 통해 백엔드 서버로 라우팅됩니다.